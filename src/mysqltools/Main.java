/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mysqltools;

import com.healthmarketscience.jackcess.DatabaseBuilder;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Dictionary;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Set;
import java.util.Vector;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author neonex
 */
public class Main extends javax.swing.JFrame {

    List<String> crunchifyList = new ArrayList<String>();
    final BlockingQueue<DelayObject> StartQueue = new java.util.concurrent.DelayQueue<>();
    ConcurrentLinkedQueue<ProcessClass> ProcedureCallsOnline = new ConcurrentLinkedQueue<ProcessClass>();
    Connection connect;
    Connection MDBconn;
    int nf = 0;
    Queue<ItemClass> qIc = new LinkedList<>();
    Queue<ItemClass> qNotFound = new LinkedList<>();
    String workingDir;
    int Adjx = 0, Adjy = 0, Adjwidth = 0, Adjheight = 0;
    String Gpath;

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
    }

    public Connection getConnection() throws SQLException, FileNotFoundException, IOException {

        // getConnectionIP();
        String ip = "127.0.0.1";//prop.getProperty("serverippath");
        String username = " ";// prop.getProperty("serveruid");
        String password = " ";//prop.getProperty("serverpwd");
        String db = " ";//prop.getProperty("serverdb");

        try {
            // This will load the MySQL driver, each DB has its own driver
            Class.forName("com.mysql.jdbc.Driver");
            // Setup the connection with the DB
            Connection connect = DriverManager
                    .getConnection("jdbc:mysql://" + ip + "/" + db + "?"
                            + "user=" + username + "&password=" + password);

            System.out.println("Connected to database." + username);
            // generateDefaultConfigFile();
            return connect;
        } catch (Exception e) {
            System.out.println("Failed to connect " + e.getMessage());
            JOptionPane.showMessageDialog(null, e.getMessage());
            JOptionPane.showMessageDialog(null, "Please Contact Network Maintainance Person to Fix the Network Stop All Work For Now ");

        }

        return null;

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        console = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        readMMMDB = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jListTables = new javax.swing.JList<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        jListrollno = new javax.swing.JList<>();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("List Procedures ");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        console.setColumns(20);
        console.setRows(5);
        jScrollPane1.setViewportView(console);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("CREATE DATABASE `question1` /*!40100 COLLATE 'latin1_swedish_ci' */;\nRENAME TABLE `question`.`q` TO `question1`.`q`, `question`.`qa` TO `question1`.`qa`;\nSELECT `DEFAULT_COLLATION_NAME` FROM `information_schema`.`SCHEMATA` WHERE `SCHEMA_NAME`='question';\nSHOW TABLE STATUS FROM `question`;\nSHOW FUNCTION STATUS WHERE `Db`='question';\nSHOW PROCEDURE STATUS WHERE `Db`='question';\nSHOW TRIGGERS FROM `question`;\nSHOW EVENTS FROM `question`;\nDROP DATABASE `question`;\nSHOW DATABASES;");
        jScrollPane2.setViewportView(jTextArea1);

        jButton2.setText("List Tables");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("SELECT FROM PET FILTER FINGER");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("FILTER SNAPS");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("FINGERTEMP");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Rename DB");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        readMMMDB.setText("Read From MDB");
        readMMMDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readMMMDBActionPerformed(evt);
            }
        });

        jListTables.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane3.setViewportView(jListTables);

        jListrollno.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane4.setViewportView(jListrollno);

        jButton7.setText("Load ");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setText("Export Snaps Roll No Only");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setText("Finger");

        jButton10.setText("Finger Image");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jButton11.setText("Import 3rd Party SQL FILE");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3)
                    .addComponent(readMMMDB, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 93, Short.MAX_VALUE)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 408, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jButton7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton6))
                            .addComponent(jButton10))
                        .addGap(0, 47, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4)
                    .addComponent(jButton5)
                    .addComponent(jButton6))
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(readMMMDB)
                    .addComponent(jButton7)
                    .addComponent(jButton8)
                    .addComponent(jButton9)
                    .addComponent(jButton10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        new Thread(new Runnable() {
            @Override
            public void run() {
                int i = 1;
                int rowCounter = 0;

                Statement stmt = null;

                try {

                    System.out.println("*****************************************************");

                    stmt = getConnection().createStatement();

                    ResultSet rslt = stmt.executeQuery("SHOW PROCEDURE STATUS \n"
                            + "WHERE Db = DATABASE() AND Type = 'PROCEDURE'");
                    while (rslt.next()) {

                        i++;

                        ConsoleMsg(" drop procedure  " + String.valueOf(rslt.getString("Name")) + ";");

                    }
                    Thread.sleep(1);

                    rslt = stmt.executeQuery("SHOW FULL TABLES IN registration WHERE TABLE_TYPE LIKE 'VIEW';");
                    while (rslt.next()) {

                        i++;

                        ConsoleMsg(" drop view  " + String.valueOf(rslt.getString("Tables_in_registration")) + ";");

                    }
                    Thread.sleep(1);

                    // return mapper;
                } catch (Exception e) {
                    e.printStackTrace();
                } finally {

                }

            }
        }).start();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        new Thread(new Runnable() {
            @Override
            public void run() {
                int i = 1;
                int rowCounter = 0;

                Statement stmt = null;

                try {

                    System.out.println("*****************************************************");

                    stmt = getConnection().createStatement();

                    ResultSet rslt = stmt.executeQuery("SHOW PROCEDURE STATUS \n"
                            + "WHERE Db = DATABASE() AND Type = 'PROCEDURE'");
                    while (rslt.next()) {

                        i++;

                        ConsoleMsg(" drop procedure  " + String.valueOf(rslt.getString("Name")) + ";");

                    }
                    Thread.sleep(1);

                    rslt = stmt.executeQuery("SHOW FULL TABLES IN registration  ;");
                    while (rslt.next()) {

                        i++;

                        ConsoleMsg(" drop view  " + String.valueOf(rslt.getString("Tables_in_registration")) + ";");

                    }
                    Thread.sleep(1);

                    // return mapper;
                } catch (Exception e) {
                    e.printStackTrace();
                } finally {

                }

            }
        }).start();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        crunchifyList.clear();
        new Thread(new Runnable() {
            @Override
            public void run() {
                int i = 1;
                int rowCounter = 0;

                Statement stmt = null;

                try {

                    System.out.println("*****************************************************");

                    stmt = getConnection().createStatement();

                    ResultSet rslt = stmt.executeQuery("select rollno from pet  ;");
                    while (rslt.next()) {

                        i++;

                        ConsoleMsg(" Valid Roll No :   " + String.valueOf(rslt.getString("rollno")) + ";");
                        crunchifyList.add(String.valueOf(rslt.getString("rollno")));
                    }
                    Thread.sleep(1);
                    ConsoleMsg(" Iterating Query Now  :  ");

                    String CustomQuery = "";
                    CustomQuery += ("delete from fingerprint where barcode not in ( ");
                    Iterator<String> crunchifyIterator = crunchifyList.iterator();
                    while (crunchifyIterator.hasNext()) {

                        String R = crunchifyIterator.next();

                        CustomQuery += (R);

                        CustomQuery += (",");
                    }

                    CustomQuery += ("0 ); ");
                    Console(CustomQuery);
                    executed(CustomQuery, "fingerprintclean");
                    // return mapper;
                } catch (Exception e) {
                    e.printStackTrace();
                } finally {

                }

            }
        }).start();

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    public static void executed(String query, String filename) {
        try {

            File oFile = new File(filename + ".sql");
            if (!oFile.exists()) {
                oFile.createNewFile();
            }
            if (oFile.canWrite()) {
                BufferedWriter oWriter = new BufferedWriter(new FileWriter(filename + ".sql", true));
                oWriter.write(query.toString());
                oWriter.close();
            }

        } catch (IOException oException) {

        }
    }

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        crunchifyList.clear();
        new Thread(new Runnable() {
            @Override
            public void run() {
                int i = 1;
                int rowCounter = 0;

                Statement stmt = null;

                try {

                    System.out.println("*****************************************************");

                    stmt = getConnection().createStatement();

                    ResultSet rslt = stmt.executeQuery("select rollno from pet  ;");
                    while (rslt.next()) {

                        i++;

                        ConsoleMsg(" Valid Roll No :   " + String.valueOf(rslt.getString("rollno")) + ";");
                        crunchifyList.add(String.valueOf(rslt.getString("rollno")));
                    }
                    Thread.sleep(1);
                    ConsoleMsg(" Iterating Query Now  :  ");

                    String CustomQuery = "";
                    CustomQuery += ("delete from snaps where rollno not in ( ");
                    Iterator<String> crunchifyIterator = crunchifyList.iterator();
                    while (crunchifyIterator.hasNext()) {

                        String R = crunchifyIterator.next();

                        CustomQuery += (R);

                        CustomQuery += (",");
                    }

                    CustomQuery += ("0 ); ");
                    Console(CustomQuery);
                    executed(CustomQuery, "snapsclean");
                    // return mapper;
                } catch (Exception e) {
                    e.printStackTrace();
                } finally {

                }

            }
        }).start();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        crunchifyList.clear();
        new Thread(new Runnable() {
            @Override
            public void run() {
                int i = 1;
                int rowCounter = 0;

                Statement stmt = null;

                try {

                    System.out.println("*****************************************************");

                    stmt = getConnection().createStatement();

                    ResultSet rslt = stmt.executeQuery("select rollno from pet  ;");
                    while (rslt.next()) {

                        i++;

                        ConsoleMsg(" Valid Roll No :   " + String.valueOf(rslt.getString("rollno")) + ";");
                        crunchifyList.add(String.valueOf(rslt.getString("rollno")));
                    }
                    Thread.sleep(1);
                    ConsoleMsg(" Iterating Query Now  :  ");

                    String CustomQuery = "";
                    CustomQuery += ("delete from fingerprinttemp where barcode not in ( ");
                    Iterator<String> crunchifyIterator = crunchifyList.iterator();
                    while (crunchifyIterator.hasNext()) {

                        String R = crunchifyIterator.next();

                        CustomQuery += (R + "-0");

                        CustomQuery += (",");
                    }

                    CustomQuery += ("0 ); ");
                    Console(CustomQuery);
                    executed(CustomQuery, "fingerprinttempclean");
                    // return mapper;
                } catch (Exception e) {
                    e.printStackTrace();
                } finally {

                }

            }
        }).start();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed

        new Thread(new Runnable() {
            @Override
            public void run() {
                int i = 1;
                int rowCounter = 0;

                Statement stmt = null;

                try {

                    System.out.println("*****************************************************");

                    stmt = getConnection().createStatement();

                    ResultSet rslt = stmt.executeQuery("SHOW PROCEDURE STATUS \n"
                            + "WHERE Db = DATABASE() AND Type = 'PROCEDURE'");
                    while (rslt.next()) {

                        i++;

                        // ConsoleMsg(" drop procedure  " + String.valueOf(rslt.getString("Name")) + ";");
                    }
                    Thread.sleep(1);

                    ConsoleMsg("CREATE DATABASE `question1` /*!40100 COLLATE 'latin1_swedish_ci' */;");
                    rslt = stmt.executeQuery("SHOW FULL TABLES IN registration  ;");
                    while (rslt.next()) {

                        i++;
//RENAME TABLE `question`.`q` TO `question1`.`q`
                        ConsoleMsg("RENAME TABLE `question`.`" + String.valueOf(rslt.getString("Tables_in_registration")) + "` TO `question1`.`" + String.valueOf(rslt.getString("Tables_in_registration")) + "`" + ";");

                    }
                    Thread.sleep(1);

                    // return mapper;
                } catch (Exception e) {
                    e.printStackTrace();
                } finally {

                }

            }
        }).start();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton6ActionPerformed

    private void readMMMDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readMMMDBActionPerformed
        new Thread(new Runnable() {
            @Override
            public void run() {
                //readMDB();

                String path = getFile();
                if (path != null) {
                    Gpath = path;
                    readMDB(path);
                }

            }
        }).start();        // TODO add your handling code here:
    }//GEN-LAST:event_readMMMDBActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        try {
            LoadTable(Gpath);
            // TODO add your handling code here:
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }        // TODO add your handling code here:
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed

        crunchifyList.clear();
        new Thread(new Runnable() {
            @Override
            public void run() {
                int i = 1;
                int rowCounter = 0;

                Statement stmt = null;

                try {

                    System.out.println("*****************************************************");

                    stmt = MDBconn.createStatement();

                    ResultSet rslt = stmt.executeQuery("select rollno from pet  ;");
                    while (rslt.next()) {

                        i++;

                        ConsoleMsg(" Valid Roll No :   " + String.valueOf(rslt.getString("rollno")) + ";");
                        crunchifyList.add(String.valueOf(rslt.getString("rollno")));
                    }
                    Thread.sleep(1);
                    ConsoleMsg(" Iterating Query Now  :  ");

                    String CustomQuery = "";
                    CustomQuery += ("delete from snaps where rollno not in ( ");
                    Iterator<String> crunchifyIterator = crunchifyList.iterator();
                    while (crunchifyIterator.hasNext()) {

                        String R = crunchifyIterator.next();

                        CustomQuery += (R);

                        CustomQuery += (",");
                    }

                    CustomQuery += ("0 ); ");
                    Console(CustomQuery);
                    executed(CustomQuery, "snapsclean");
                    // return mapper;
                } catch (Exception e) {
                    e.printStackTrace();
                } finally {

                }

            }
        }).start();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        crunchifyList.clear();
        new Thread(new Runnable() {
            @Override
            public void run() {
                int i = 1;
                int rowCounter = 0;

                Statement stmt = null;

                try {

                    System.out.println("*****************************************************");

                    stmt = MDBconn.createStatement();

                    ResultSet rslt = stmt.executeQuery("select rollno from pet  ;");
                    while (rslt.next()) {

                        i++;

                        ConsoleMsg(" Valid Roll No :   " + String.valueOf(rslt.getString("rollno")) + ";");
                        crunchifyList.add(String.valueOf(rslt.getString("rollno")));
                    }
                    Thread.sleep(1);
                    ConsoleMsg(" Iterating Query Now  :  ");

                    String CustomQuery = "";
                    CustomQuery += ("delete from fingerprinttemp where barcode not in ( ");
                    Iterator<String> crunchifyIterator = crunchifyList.iterator();
                    while (crunchifyIterator.hasNext()) {

                        String R = crunchifyIterator.next();

                        CustomQuery += (R + "-0");

                        CustomQuery += (",");
                    }

                    CustomQuery += ("0 ); ");
                    Console(CustomQuery);
                    executed(CustomQuery, "fingerprinttempclean");
                    // return mapper;
                } catch (Exception e) {
                    e.printStackTrace();
                } finally {

                }

            }
        }).start();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        new Thread(new Runnable() {
            @Override
            public void run() {
                //readMDB();

                String path = getFile();
                if (path != null) {
                    Gpath = path;
                    SqlScriptRunner sql = new SqlScriptRunner(Main.this);
                    ConsoleMsg("Importing....");
                    try {
                        sql.run(getConnection(), new File(Gpath), true);
                    } catch (IOException ex) {
                        Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (SQLException ex) {
                        Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    ConsoleMsg("Import Completed");
                }

            }
        }).start();         // TODO add your handling code here:
    }//GEN-LAST:event_jButton11ActionPerformed
    public void LoadTable(String path) throws ClassNotFoundException, SQLException {
        Class.forName("net.ucanaccess.jdbc.UcanaccessDriver");
        ConsoleMsg(" # Attempting MDB Stage Two #  ");
        MDBconn = DriverManager.getConnection("jdbc:ucanaccess://" + path);
        readMMMDB.setText("MDB IS OK");
        ConsoleMsg(" # MDB File is Compatible #  ");
        DatabaseMetaData meta = MDBconn.getMetaData();
        ResultSet res = meta.getTables(null, null, jListTables.getSelectedValue(),
                new String[]{"TABLE"});

        if (res.next()) {
            // Table exists
            ConsoleMsg("Table Log Exists");
        } else {
            // Table does not exist
            ConsoleMsg(" #  #  ");
            ConsoleMsg("Table Log Creating Now ");
            MdbClass m = new MdbClass();
            m.createTempTableLog(MDBconn);
            ConsoleMsg("Table Log Created ");
        }

        getAllFields();
        ConsoleMsg(" # Proceed to Field Selectiong #  ");
    }

    public void getAllFields() {
        jListrollno.removeAll();

        String query = "select * from  " + jListTables.getSelectedValue();

        Statement stmt = null;
        Dictionary jackets = new Hashtable();
        DefaultListModel model = new DefaultListModel();

        try {

            System.out.println("*****************************************************");
            stmt = MDBconn.createStatement();
            ResultSet rslt = stmt.executeQuery(query);
            ResultSetMetaData rsmd = rslt.getMetaData();
            int columnCount = rsmd.getColumnCount();

            String tableName = null;
            StringBuilder sb = new StringBuilder(1024);
            if (columnCount > 0) {
                sb.append("Create table ").append(rsmd.getTableName(1)).append(" ( ");
            }
            for (int i = 1; i <= columnCount; i++) {
                if (i > 1) {
                    sb.append(", ");
                }
                String columnName = rsmd.getColumnLabel(i);
                String columnType = rsmd.getColumnTypeName(i);

                sb.append(columnName).append(" ").append(columnType);

                int precision = rsmd.getPrecision(i);
                if (precision != 0) {
                    sb.append("( ").append(precision).append(" )");
                }
            } // for columns
            sb.append(" ) ");

            System.out.println(sb.toString());
            ConsoleMsg(sb.toString());
// The column count starts from 1
            for (int i = 1; i <= columnCount; i++) {
                String name = rsmd.getColumnName(i);
                String type = rsmd.getColumnTypeName(i);
                //ConsoleMsg(name + " " + type);

                model.addElement(name);

            }
            jListrollno.setModel(model);

        } catch (Exception e) {
            e.printStackTrace();
        } finally {

        }

    }

    public String getFile() {
        JFileChooser chooser;
        int result;

        chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("Select SQL FILE ");
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        //
        // disable the "All files" option.
        //
        chooser.setAcceptAllFileFilterUsed(false);
        //    
        if (chooser.showOpenDialog(Main.this) == JFileChooser.APPROVE_OPTION) {
            System.out.println("getCurrentDirectory(): "
                    + chooser.getCurrentDirectory());
            System.out.println("getSelectedFile() : "
                    + chooser.getSelectedFile());
            return chooser.getSelectedFile().toString().trim();
        } else {
            System.out.println("No Selection ");
            return null;
        }

    }

    public void readMDB(String path) {
        try {
            ConsoleMsg(" # Attempting to Read Path  #  ");
            Set<String> setA;
            try {
                setA = DatabaseBuilder.open(new File(path)).getTableNames();
                Iterator iterator = setA.iterator();
                Vector listData = new Vector();
                while (iterator.hasNext()) {
                    String element = (String) iterator.next();
                    listData.addElement(element);
                    System.err.print(element);
                }
                jListTables.setListData(listData);
            } catch (IOException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                ConsoleMsg(" # File Error  #  ");
            } finally {

            }
            Class.forName("net.ucanaccess.jdbc.UcanaccessDriver");
            ConsoleMsg(" # Attempting MDB Stage Two #  ");
            MDBconn = DriverManager.getConnection("jdbc:ucanaccess://" + path);
            readMMMDB.setText("MDB IS OK");
            ConsoleMsg(" # MDB File is Compatible #  ");
            DatabaseMetaData meta = MDBconn.getMetaData();
            ResultSet res = meta.getTables(null, null, "pet1",
                    new String[]{"TABLE"});

            if (res.next()) {
                // Table exists
                ConsoleMsg("Table Log Exists");
            } else {
                // Table does not exist
                ConsoleMsg(" #  #  ");
                ConsoleMsg("Table Log Creating Now ");
                MdbClass m = new MdbClass();
                m.createTempTableLog(MDBconn);
                ConsoleMsg("Table Log Created ");
            }

//            String query = "select * from passtable ";
//
//            Statement stmt = null;
//            Dictionary jackets = new Hashtable();
//
//            try {
//
//                System.out.println("*****************************************************");
//                stmt = MDBconn.createStatement();
//                ResultSet rslt = stmt.executeQuery(query);
//                while (rslt.next()) {
//
//                    String id = String.valueOf(rslt.getString("rollno"));
//                    String rollno = String.valueOf(rslt.getString("DISTRICT"));
//                    ProcessClass c = new ProcessClass();
//                    c.setRollno(rslt.getString("rollno"));
//
//                    ProcedureCallsOnline.add(c);
//                    ConsoleMsg(id + "\t" + rollno);
//                }
//                Thread.sleep(2000);
//
//                // return mapper;
//            } catch (Exception e) {
//                e.printStackTrace();
//            } finally {
//
//            }
            // getAllDistrict();
            getAllFields();

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            readMMMDB.setText("MDB IS ");
        } catch (SQLException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void ConsoleMsg(String msg) {

        console.append("\n" + msg);
        console.setCaretPosition(console.getDocument().getLength());
    }

    public void Console(String msg) {

        console.append(msg);
        console.setCaretPosition(console.getDocument().getLength());
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea console;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JList<String> jListTables;
    private javax.swing.JList<String> jListrollno;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JButton readMMMDB;
    // End of variables declaration//GEN-END:variables
}
